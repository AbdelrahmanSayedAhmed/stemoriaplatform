//packages/database/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core User Models
model User {
  id                String            @id @default(cuid())
  email             String            @unique
  emailVerified     DateTime?
  name              String?
  image             String?
  hashedPassword    String?
  role              UserRole          @default(STUDENT)
  status            UserStatus        @default(ACTIVE)
  
  // Relations
  accounts          Account[]
  sessions          Session[]
  institutions      InstitutionUser[]
  enrollments       Enrollment[]
  progress          Progress[]
  submissions       Submission[]
  tutorProfile      Tutor?
  parentOf          ParentStudent[]   @relation("parent")
  childOf           ParentStudent[]   @relation("student")
  notifications     Notification[]
  auditLogs         AuditLog[]        @relation("actor")
  
  // Timestamps
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  lastLoginAt       DateTime?
  
  @@index([email])
  @@index([role])
  @@index([status])
}

enum UserRole {
  STUDENT
  TEACHER
  PARENT
  TUTOR
  INSTITUTION_ADMIN
  CONTENT_EDITOR
  SUPPORT_AGENT
  FINANCE_ADMIN
  SYSTEM_ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

// Authentication Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// Institution Models
model Institution {
  id              String             @id @default(cuid())
  name            String
  slug            String             @unique
  type            InstitutionType
  country         String
  city            String?
  address         String?
  logo            String?
  website         String?
  contactEmail    String
  contactPhone    String?
  
  // Settings
  settings        Json               @default("{}")
  features        String[]           @default([])
  maxStudents     Int                @default(1000)
  maxTeachers     Int                @default(100)
  
  // Relations
  users           InstitutionUser[]
  departments     Department[]
  classes         Class[]
  joinCodes       JoinCode[]
  subscriptions   Subscription[]
  
  // Timestamps
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  
  @@index([slug])
  @@index([type])
}

enum InstitutionType {
  SCHOOL
  UNIVERSITY
  TRAINING_CENTER
  CORPORATE
}

model Department {
  id            String          @id @default(cuid())
  name          String
  code          String
  institutionId String
  institution   Institution     @relation(fields: [institutionId], references: [id])
  classes       Class[]
  
  @@unique([institutionId, code])
  @@index([institutionId])
}

model Class {
  id            String          @id @default(cuid())
  name          String
  code          String
  grade         Int?
  section       String?
  academicYear  String
  institutionId String
  departmentId  String?
  teacherId     String?
  
  institution   Institution     @relation(fields: [institutionId], references: [id])
  department    Department?     @relation(fields: [departmentId], references: [id])
  enrollments   Enrollment[]
  assignments   Assignment[]
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  @@unique([institutionId, code, academicYear])
  @@index([institutionId])
  @@index([teacherId])
}

// Learning Content Models
model Subject {
  id            String          @id @default(cuid())
  slug          String          @unique
  name          String
  icon          String?
  color         String?
  description   String?
  order         Int             @default(0)
  
  units         Unit[]
  lessons       Lesson[]
  tools         Tool[]
  games         Game[]
  labs          Lab[]
  
  @@index([slug])
}

model Unit {
  id            String          @id @default(cuid())
  subjectId     String
  slug          String
  title         String
  description   String?
  order         Int             @default(0)
  estimatedTime Int?            // in minutes
  
  subject       Subject         @relation(fields: [subjectId], references: [id])
  lessons       Lesson[]
  
  @@unique([subjectId, slug])
  @@index([subjectId])
}

model Lesson {
  id            String          @id @default(cuid())
  subjectId     String
  unitId        String
  slug          String
  title         String
  description   String?
  content       Json            // Rich content structure
  level         Level
  duration      Int             // in minutes
  format        LessonFormat
  tags          String[]
  
  // Features
  hasVideo      Boolean         @default(false)
  hasInteractive Boolean        @default(false)
  hasVR         Boolean         @default(false)
  hasAR         Boolean         @default(false)
  
  // Publishing
  status        ContentStatus   @default(DRAFT)
  publishedAt   DateTime?
  publishedBy   String?
  version       Int             @default(1)
  
  // Relations
  subject       Subject         @relation(fields: [subjectId], references: [id])
  unit          Unit            @relation(fields: [unitId], references: [id])
  prerequisites Lesson[]        @relation("Prerequisites")
  nextLessons   Lesson[]        @relation("Prerequisites")
  tools         LessonTool[]
  games         LessonGame[]
  labs          LessonLab[]
  progress      Progress[]
  assignments   Assignment[]
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  @@unique([unitId, slug])
  @@index([subjectId])
  @@index([unitId])
  @@index([status])
  @@index([level])
}

enum Level {
  GRADE_1_3
  GRADE_4_6
  GRADE_7_9
  GRADE_10_12
  UNIVERSITY
  ADVANCED
}

enum LessonFormat {
  TEXT
  VIDEO
  INTERACTIVE
  MIXED
}

enum ContentStatus {
  DRAFT
  REVIEW
  APPROVED
  PUBLISHED
  ARCHIVED
}

// Interactive Tools
model Tool {
  id            String          @id @default(cuid())
  subjectId     String
  slug          String          @unique
  name          String
  description   String?
  type          ToolType
  config        Json            // Tool configuration
  embedUrl      String?
  
  subject       Subject         @relation(fields: [subjectId], references: [id])
  lessons       LessonTool[]
  usage         ToolUsage[]
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  @@index([subjectId])
  @@index([type])
}

enum ToolType {
  CALCULATOR
  SIMULATOR
  VISUALIZER
  BUILDER
  REFERENCE
}

// Games
model Game {
  id            String          @id @default(cuid())
  subjectId     String
  slug          String          @unique
  title         String
  description   String?
  type          GameType
  config        Json
  thumbnailUrl  String?
  
  subject       Subject         @relation(fields: [subjectId], references: [id])
  lessons       LessonGame[]
  scores        GameScore[]
  achievements  Achievement[]
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  @@index([subjectId])
  @@index([type])
}

enum GameType {
  QUIZ
  PUZZLE
  SIMULATION
  ADVENTURE
  MULTIPLAYER
}

// Virtual Labs
model Lab {
  id            String          @id @default(cuid())
  subjectId     String
  slug          String          @unique
  title         String
  description   String?
  type          LabType
  difficulty    Difficulty
  duration      Int             // estimated time in minutes
  config        Json
  vrEnabled     Boolean         @default(false)
  arEnabled     Boolean         @default(false)
  
  subject       Subject         @relation(fields: [subjectId], references: [id])
  lessons       LessonLab[]
  sessions      LabSession[]
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  @@index([subjectId])
  @@index([type])
}

enum LabType {
  CHEMISTRY
  PHYSICS
  BIOLOGY
  ENGINEERING
  COMPUTER_SCIENCE
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

// User Progress & Analytics
model Progress {
  id            String          @id @default(cuid())
  userId        String
  lessonId      String
  status        ProgressStatus
  score         Float?
  timeSpent     Int             @default(0) // in seconds
  completedAt   DateTime?
  
  user          User            @relation(fields: [userId], references: [id])
  lesson        Lesson          @relation(fields: [lessonId], references: [id])
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
  @@index([status])
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

// Assessments & Assignments
model Assignment {
  id            String          @id @default(cuid())
  title         String
  description   String?
  type          AssignmentType
  lessonId      String?
  classId       String
  teacherId     String
  dueDate       DateTime
  points        Int             @default(100)
  
  lesson        Lesson?         @relation(fields: [lessonId], references: [id])
  class         Class           @relation(fields: [classId], references: [id])
  submissions   Submission[]
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  @@index([classId])
  @@index([teacherId])
  @@index([dueDate])
}

enum AssignmentType {
  HOMEWORK
  QUIZ
  EXAM
  PROJECT
  LAB_REPORT
}

model Submission {
  id            String          @id @default(cuid())
  assignmentId  String
  studentId     String
  content       Json
  score         Float?
  feedback      String?
  status        SubmissionStatus
  submittedAt   DateTime        @default(now())
  gradedAt      DateTime?
  gradedBy      String?
  
  assignment    Assignment      @relation(fields: [assignmentId], references: [id])
  student       User            @relation(fields: [studentId], references: [id])
  
  @@unique([assignmentId, studentId])
  @@index([assignmentId])
  @@index([studentId])
  @@index([status])
}

enum SubmissionStatus {
  DRAFT
  SUBMITTED
  GRADING
  GRADED
  RETURNED
}

// Tutoring
model Tutor {
  id            String          @id @default(cuid())
  userId        String          @unique
  bio           String?
  subjects      String[]
  languages     String[]
  hourlyRate    Decimal         @db.Decimal(10, 2)
  currency      String          @default("USD")
  availability  Json            // Weekly availability schedule
  rating        Float           @default(0)
  totalSessions Int             @default(0)
  verified      Boolean         @default(false)
  
  user          User            @relation(fields: [userId], references: [id])
  sessions      TutorSession[]
  reviews       TutorReview[]
  resources     TutorResource[]
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  @@index([userId])
  @@index([verified])
  @@index([rating])
}

model TutorSession {
  id            String          @id @default(cuid())
  tutorId       String
  studentId     String
  subject       String
  scheduledAt   DateTime
  duration      Int             // in minutes
  price         Decimal         @db.Decimal(10, 2)
  status        SessionStatus
  meetingUrl    String?
  recordingUrl  String?
  notes         String?
  
  tutor         Tutor           @relation(fields: [tutorId], references: [id])
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  @@index([tutorId])
  @@index([studentId])
  @@index([scheduledAt])
  @@index([status])
}

enum SessionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

// Billing & Subscriptions
model Subscription {
  id            String          @id @default(cuid())
  institutionId String?
  userId        String?
  planId        String
  status        SubscriptionStatus
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean     @default(false)
  
  institution   Institution?    @relation(fields: [institutionId], references: [id])
  plan          Plan            @relation(fields: [planId], references: [id])
  invoices      Invoice[]
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  @@index([institutionId])
  @@index([userId])
  @@index([status])
}

enum SubscriptionStatus {
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELLED
  UNPAID
}

model Plan {
  id            String          @id @default(cuid())
  name          String
  slug          String          @unique
  description   String?
  price         Decimal         @db.Decimal(10, 2)
  currency      String          @default("USD")
  interval      BillingInterval
  features      String[]
  limits        Json
  
  subscriptions Subscription[]
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  @@index([slug])
}

enum BillingInterval {
  MONTHLY
  QUARTERLY
  YEARLY
}

// System & Security
model AuditLog {
  id            String          @id @default(cuid())
  actorId       String?
  actorEmail    String?
  action        String
  resource      String
  resourceId    String?
  details       Json?
  ipAddress     String?
  userAgent     String?
  
  actor         User?           @relation("actor", fields: [actorId], references: [id])
  
  createdAt     DateTime        @default(now())
  
  @@index([actorId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
}

model FeatureFlag {
  id            String          @id @default(cuid())
  key           String          @unique
  enabled       Boolean         @default(false)
  description   String?
  rules         Json?           // Targeting rules
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  @@index([key])
}

// Many-to-many relations
model InstitutionUser {
  id            String          @id @default(cuid())
  institutionId String
  userId        String
  role          InstitutionRole
  joinedAt      DateTime        @default(now())
  
  institution   Institution     @relation(fields: [institutionId], references: [id])
  user          User            @relation(fields: [userId], references: [id])
  
  @@unique([institutionId, userId])
  @@index([institutionId])
  @@index([userId])
}

enum InstitutionRole {
  STUDENT
  TEACHER
  ADMIN
}

model Enrollment {
  id            String          @id @default(cuid())
  classId       String
  studentId     String
  enrolledAt    DateTime        @default(now())
  status        EnrollmentStatus @default(ACTIVE)
  
  class         Class           @relation(fields: [classId], references: [id])
  student       User            @relation(fields: [studentId], references: [id])
  
  @@unique([classId, studentId])
  @@index([classId])
  @@index([studentId])
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  DROPPED
  TRANSFERRED
}

model ParentStudent {
  id            String          @id @default(cuid())
  parentId      String
  studentId     String
  relationship  String?
  
  parent        User            @relation("parent", fields: [parentId], references: [id])
  student       User            @relation("student", fields: [studentId], references: [id])
  
  @@unique([parentId, studentId])
  @@index([parentId])
  @@index([studentId])
}

// Join tables for lessons
model LessonTool {
  lessonId      String
  toolId        String
  order         Int             @default(0)
  
  lesson        Lesson          @relation(fields: [lessonId], references: [id])
  tool          Tool            @relation(fields: [toolId], references: [id])
  
  @@id([lessonId, toolId])
  @@index([lessonId])
  @@index([toolId])
}

model LessonGame {
  lessonId      String
  gameId        String
  order         Int             @default(0)
  
  lesson        Lesson          @relation(fields: [lessonId], references: [id])
  game          Game            @relation(fields: [gameId], references: [id])
  
  @@id([lessonId, gameId])
  @@index([lessonId])
  @@index([gameId])
}

model LessonLab {
  lessonId      String
  labId         String
  order         Int             @default(0)
  
  lesson        Lesson          @relation(fields: [lessonId], references: [id])
  lab           Lab             @relation(fields: [labId], references: [id])
  
  @@id([lessonId, labId])
  @@index([lessonId])
  @@index([labId])
}

// Additional models for complete functionality
model JoinCode {
  id            String          @id @default(cuid())
  institutionId String
  code          String          @unique
  role          InstitutionRole
  expiresAt     DateTime?
  maxUses       Int?
  uses          Int             @default(0)
  isActive      Boolean         @default(true)
  
  institution   Institution     @relation(fields: [institutionId], references: [id])
  
  createdAt     DateTime        @default(now())
  
  @@index([institutionId])
  @@index([code])
}

model Notification {
  id            String          @id @default(cuid())
  userId        String
  title         String
  message       String
  type          NotificationType
  data          Json?
  read          Boolean         @default(false)
  readAt        DateTime?
  
  user          User            @relation(fields: [userId], references: [id])
  
  createdAt     DateTime        @default(now())
  
  @@index([userId])
  @@index([read])
  @@index([createdAt])
}

enum NotificationType {
  SYSTEM
  ASSIGNMENT
  GRADE
  MESSAGE
  ACHIEVEMENT
  REMINDER
}

model GameScore {
  id            String          @id @default(cuid())
  gameId        String
  userId        String
  score         Int
  timeSpent     Int             // in seconds
  attempts      Int             @default(1)
  
  game          Game            @relation(fields: [gameId], references: [id])
  
  createdAt     DateTime        @default(now())
  
  @@index([gameId])
  @@index([userId])
  @@index([score])
}

model Achievement {
  id            String          @id @default(cuid())
  gameId        String?
  name          String
  description   String
  icon          String?
  points        Int             @default(0)
  criteria      Json            // Achievement criteria
  
  game          Game?           @relation(fields: [gameId], references: [id])
  
  createdAt     DateTime        @default(now())
  
  @@index([gameId])
}

model LabSession {
  id            String          @id @default(cuid())
  labId         String
  userId        String
  data          Json            // Session data and results
  completed     Boolean         @default(false)
  score         Float?
  
  lab           Lab             @relation(fields: [labId], references: [id])
  
  startedAt     DateTime        @default(now())
  completedAt   DateTime?
  
  @@index([labId])
  @@index([userId])
}

model ToolUsage {
  id            String          @id @default(cuid())
  toolId        String
  userId        String
  sessionData   Json?
  duration      Int             // in seconds
  
  tool          Tool            @relation(fields: [toolId], references: [id])
  
  createdAt     DateTime        @default(now())
  
  @@index([toolId])
  @@index([userId])
}

model TutorReview {
  id            String          @id @default(cuid())
  tutorId       String
  studentId     String
  rating        Int             // 1-5
  comment       String?
  
  tutor         Tutor           @relation(fields: [tutorId], references: [id])
  
  createdAt     DateTime        @default(now())
  
  @@unique([tutorId, studentId])
  @@index([tutorId])
  @@index([rating])
}

model TutorResource {
  id            String          @id @default(cuid())
  tutorId       String
  title         String
  description   String?
  fileUrl       String
  price         Decimal?        @db.Decimal(10, 2)
  downloads     Int             @default(0)
  
  tutor         Tutor           @relation(fields: [tutorId], references: [id])
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  @@index([tutorId])
}

model Invoice {
  id            String          @id @default(cuid())
  subscriptionId String
  amount        Decimal         @db.Decimal(10, 2)
  currency      String          @default("USD")
  status        InvoiceStatus
  dueDate       DateTime
  paidAt        DateTime?
  
  subscription  Subscription    @relation(fields: [subscriptionId], references: [id])
  
  createdAt     DateTime        @default(now())
  
  @@index([subscriptionId])
  @@index([status])
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}